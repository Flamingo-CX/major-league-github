name: Build and Deploy Major League Github üöÄ ü¶©

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
  VERSION: v1.0.${{ github.run_number }}
  ENVIRONMENT: production
  
  # DigitalOcean
  REGISTRY: ${{ secrets.REGISTRY }}
  REGISTRY_NAME: ${{ secrets.REGISTRY_NAME }}
  DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

  DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
  DOMAIN_SUFFIX: ${{ secrets.DOMAIN_SUFFIX }}

  GH_PAT: ${{ secrets.GH_PAT }}
  GH_API_TOKENS: ${{ secrets.GH_API_TOKENS }}
  
  # Cluster configuration
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  CLUSTER_REGION: nyc3
  CLUSTER_SIZE: s-2vcpu-4gb
  CLUSTER_NODE_COUNT: "2"
  CLUSTER_VERSION: latest
  
  # Replica counts
  BACKEND_REPLICAS: 1
  FRONTEND_REPLICAS: 1
  
  # Backend resources
  BACKEND_REQUEST_MEMORY: 512Mi
  BACKEND_REQUEST_CPU: 200m
  BACKEND_LIMIT_MEMORY: 1Gi
  BACKEND_LIMIT_CPU: 500m
  
  # Frontend resources
  FRONTEND_REQUEST_MEMORY: 128Mi
  FRONTEND_REQUEST_CPU: 100m
  FRONTEND_LIMIT_MEMORY: 256Mi
  FRONTEND_LIMIT_CPU: 200m
  
  # Java settings
  JAVA_MAX_HEAP: 768m
  JAVA_MIN_HEAP: 512m

jobs:
  build-and-deploy:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      deployments: write

    steps:
      - name: Verify Required Secrets üîí
        run: |
          missing_secrets=()
          
          if [ -z "${{ secrets.PROJECT_NAME }}" ]; then
            missing_secrets+=("PROJECT_NAME")
          fi
          
          if [ -z "${{ secrets.REGISTRY }}" ]; then
            missing_secrets+=("REGISTRY")
          fi
          
          if [ -z "${{ secrets.REGISTRY_NAME }}" ]; then
            missing_secrets+=("REGISTRY_NAME")
          fi
          
          if [ -z "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" ]; then
            missing_secrets+=("DIGITALOCEAN_ACCESS_TOKEN")
          fi
          
          if [ -z "${{ secrets.DOMAIN_NAME }}" ]; then
            missing_secrets+=("DOMAIN_NAME")
          fi
          
          if [ -z "${{ secrets.DOMAIN_SUFFIX }}" ]; then
            missing_secrets+=("DOMAIN_SUFFIX")
          fi
          
          if [ -z "${{ secrets.GH_PAT }}" ]; then
            missing_secrets+=("GH_PAT")
          fi
          
          if [ -z "${{ secrets.GH_API_TOKENS }}" ]; then
            missing_secrets+=("GH_API_TOKENS")
          fi
          
          if [ -z "${{ secrets.CLUSTER_NAME }}" ]; then
            missing_secrets+=("CLUSTER_NAME")
          fi
          
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "‚ùå Error: Missing required secrets: ${missing_secrets[*]}"
            exit 1
          fi
          
          echo "‚úÖ All required secrets are set"

      - name: Checkout code üì¶
        uses: actions/checkout@v4
        with:
          token: ${{ env.GH_PAT }}

      - name: Install doctl üõ†Ô∏è
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ env.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Setup DigitalOcean Infrastructure üèóÔ∏è
        run: |
          echo "ü¶© Validating DigitalOcean credentials..."
          if ! doctl account get > /dev/null 2>&1; then
            echo "‚ùå Error: Invalid DigitalOcean credentials"
            exit 1
          fi
          
          echo "ü¶© Creating DigitalOcean Project..."
          PROJECT_ID=""
          
          # First try to list all projects and find ours
          echo "ü¶© Checking for existing project..."
          if PROJECT_ID=$(doctl projects list --format ID,Name --no-header | grep -i "${PROJECT_NAME}" | awk '{print $1}') && [ ! -z "$PROJECT_ID" ]; then
            echo "‚úÖ Found existing project with ID: ${PROJECT_ID}"
          else
            echo "ü¶© Creating new project: ${PROJECT_NAME}..."
            if PROJECT_ID=$(doctl projects create \
              --name "${PROJECT_NAME}" \
              --purpose "Production" \
              --environment "Production" \
              --description "Major League GitHub Infrastructure" \
              --format ID --no-header); then
              echo "‚úÖ Project created successfully with ID: ${PROJECT_ID}"
            else
              echo "‚ùå Error: Failed to create project"
              exit 1
            fi
          fi
          
          # Double check we have a valid project ID
          if [ -z "$PROJECT_ID" ] || ! doctl projects get "$PROJECT_ID" > /dev/null 2>&1; then
            echo "‚ùå Error: Invalid project ID: ${PROJECT_ID}"
            exit 1
          fi
          
          echo "ü¶© Project ID confirmed: ${PROJECT_ID}"
          
          echo "ü¶© Checking DigitalOcean Registry..."
          if ! doctl registry get > /dev/null 2>&1; then
            echo "ü¶© Creating DigitalOcean Registry..."
            if ! doctl registry create "${REGISTRY_NAME}" \
              --subscription-tier basic \
              --region "${CLUSTER_REGION}"; then
              echo "‚ùå Error: Failed to create registry"
              exit 1
            fi
            
            echo "ü¶© Configuring registry garbage collection..."
            if ! doctl registry garbage-collection start \
              --include-untagged-manifests \
              --force; then
              echo "‚ö†Ô∏è Warning: Failed to configure garbage collection"
              # Don't exit on garbage collection failure, it's not critical
            fi
            
            echo "‚úÖ Registry created and configured successfully"
          else
            echo "‚úÖ Registry already exists"
          fi
          
          # Verify registry is accessible
          echo "ü¶© Verifying registry access..."
          if ! doctl registry get > /dev/null 2>&1; then
            echo "‚ùå Error: Registry verification failed"
            exit 1
          fi
          
          echo "ü¶© Checking Kubernetes cluster..."
          if ! doctl kubernetes cluster get "${CLUSTER_NAME}" > /dev/null 2>&1; then
            echo "ü¶© Creating Kubernetes cluster: ${CLUSTER_NAME}..."
            if ! doctl kubernetes cluster create "${CLUSTER_NAME}" \
              --region "${CLUSTER_REGION}" \
              --size "${CLUSTER_SIZE}" \
              --count "${CLUSTER_NODE_COUNT}" \
              --tag "${CLUSTER_NAME}" \
              --wait; then
              echo "‚ùå Error: Failed to create cluster ${CLUSTER_NAME}"
              exit 1
            fi
            
            echo "ü¶© Configuring cluster auto-scaling..."
            if ! doctl kubernetes cluster node-pool update "${CLUSTER_NAME}" default \
              --auto-scale \
              --min-nodes 2 \
              --max-nodes 4; then
              echo "‚ö†Ô∏è Warning: Failed to configure auto-scaling"
            fi
            
            echo "‚úÖ Cluster created and configured successfully"
          else
            echo "‚úÖ Cluster ${CLUSTER_NAME} already exists"
          fi
          
          echo "ü¶© Attaching resources to project..."
          
          # Get the Kubernetes cluster ID
          CLUSTER_ID=$(doctl kubernetes cluster get "${CLUSTER_NAME}" --format ID --no-header)
          if [ ! -z "$CLUSTER_ID" ]; then
            CLUSTER_URN="do:kubernetes:${CLUSTER_ID}"
            echo "Found cluster URN: ${CLUSTER_URN}"
          else
            echo "‚ö†Ô∏è Warning: Could not get cluster ID"
          fi
          
          # Get registry ID - note that we need to extract just the ID from the registry info
          REGISTRY_INFO=$(doctl registry get --format ID --no-header)
          if [ ! -z "$REGISTRY_INFO" ]; then
            # The registry ID is the last part of the registry info
            REGISTRY_ID=$(echo "$REGISTRY_INFO" | tr -d '\r')
            REGISTRY_URN="do:registry:${REGISTRY_ID}"
            echo "Found registry URN: ${REGISTRY_URN}"
          else
            echo "‚ö†Ô∏è Warning: Could not get registry ID"
          fi
          
          # Build resources array with error checking
          RESOURCES=()
          
          # Add resources if they exist and are properly formatted
          if [ ! -z "$CLUSTER_URN" ] && [[ "$CLUSTER_URN" =~ ^do:kubernetes:[a-zA-Z0-9-]+$ ]]; then
            RESOURCES+=("${CLUSTER_URN}")
            echo "Adding cluster to resources: ${CLUSTER_URN}"
          else
            echo "‚ö†Ô∏è Warning: Invalid cluster URN format: ${CLUSTER_URN}"
          fi
          
          if [ ! -z "$REGISTRY_URN" ] && [[ "$REGISTRY_URN" =~ ^do:registry:[a-zA-Z0-9-]+$ ]]; then
            RESOURCES+=("${REGISTRY_URN}")
            echo "Adding registry to resources: ${REGISTRY_URN}"
          else
            echo "‚ö†Ô∏è Warning: Invalid registry URN format: ${REGISTRY_URN}"
          fi
          
          # Debug output
          echo "Number of resources to attach: ${#RESOURCES[@]}"
          echo "Resources array contents:"
          printf '%s\n' "${RESOURCES[@]}"
          
          # Only try to attach if we have resources
          if [ ${#RESOURCES[@]} -gt 0 ]; then
            echo "ü¶© Attaching resources to project ${PROJECT_NAME} (ID: ${PROJECT_ID})..."
            
            # Build the resources string with proper quoting
            RESOURCES_STRING=""
            for resource in "${RESOURCES[@]}"; do
              RESOURCES_STRING+="--resource='${resource}' "
            done
            
            echo "Resource string for doctl: ${RESOURCES_STRING}"
            
            # Try to attach resources with full error output
            if ! eval "doctl projects resources assign '${PROJECT_ID}' ${RESOURCES_STRING}"; then
              echo "‚ö†Ô∏è Warning: Failed to attach resources to project"
              echo "ü¶© Current project resources:"
              doctl projects resources list "${PROJECT_ID}" --format "Resource Type,Resource ID" --no-header || true
            else
              echo "‚úÖ Resources attached to project successfully"
              echo "ü¶© Current project resources:"
              doctl projects resources list "${PROJECT_ID}" --format "Resource Type,Resource ID" --no-header || true
            fi
          else
            echo "‚ö†Ô∏è Warning: No valid resources to attach"
          fi
          
          # Verify project resources
          echo "ü¶© Verifying project resources..."
          if ! doctl projects resources list "${PROJECT_ID}" --format "Resource Type,Resource ID" --no-header; then
            echo "‚ö†Ô∏è Warning: Could not verify project resources"
          fi
          
          echo "ü¶© Verifying infrastructure..."
          if ! doctl registry get > /dev/null 2>&1; then
            echo "‚ùå Error: Registry verification failed"
            exit 1
          fi
          
          if ! doctl kubernetes cluster get "${CLUSTER_NAME}" > /dev/null 2>&1; then
            echo "‚ùå Error: Cluster verification failed"
            exit 1
          fi
          
          if ! doctl projects get "${PROJECT_ID}" > /dev/null 2>&1; then
            echo "‚ùå Error: Project verification failed"
            exit 1
          fi
          
          echo "‚úÖ Infrastructure setup completed successfully"

      - name: Configure Docker and Kubernetes üîë
        run: |
          echo "ü¶© Setting up Docker..."
          if ! doctl registry login --expiry-seconds 1800; then
            echo "‚ùå Error: Failed to log in to Docker registry"
            exit 1
          fi
          
          echo "ü¶© Setting up Kubernetes..."
          if ! doctl kubernetes cluster kubeconfig save "$CLUSTER_NAME" --expiry-seconds 1800; then
            echo "‚ùå Error: Failed to save Kubernetes config"
            exit 1
          fi
          
          echo "ü¶© Verifying Kubernetes connection..."
          if ! kubectl cluster-info; then
            echo "‚ùå Error: Failed to connect to Kubernetes cluster"
            exit 1
          fi
          
          echo "ü¶© Creating registry credentials..."
          if ! doctl registry docker-config > docker-config.json; then
            echo "‚ùå Error: Failed to get Docker config"
            exit 1
          fi
          
          DOCKER_CONFIG_BASE64=$(base64 -w 0 docker-config.json)
          echo "DOCKER_CONFIG_BASE64=${DOCKER_CONFIG_BASE64}" >> $GITHUB_ENV
          
          echo "‚úÖ Configuration completed successfully"

      - name: Build and push backend image üèóÔ∏è ü¶©
        run: |
          echo "ü¶© Building backend image..."
          if ! docker build -t ${REGISTRY}/${REGISTRY_NAME}/backend:${VERSION} ./backend; then
            echo "‚ùå Error: Failed to build backend image"
            exit 1
          fi
          
          echo "ü¶© Pushing versioned backend image..."
          if ! docker push ${REGISTRY}/${REGISTRY_NAME}/backend:${VERSION}; then
            echo "‚ùå Error: Failed to push backend versioned image"
            exit 1
          fi
          
          echo "ü¶© Tagging and pushing latest..."
          docker tag ${REGISTRY}/${REGISTRY_NAME}/backend:${VERSION} ${REGISTRY}/${REGISTRY_NAME}/backend:latest
          if ! docker push ${REGISTRY}/${REGISTRY_NAME}/backend:latest; then
            echo "‚ùå Error: Failed to push backend latest image"
            exit 1
          fi
          
          echo "‚úÖ Backend image build and push completed"

      - name: Build and push frontend image üé® ü¶©
        run: |
          echo "ü¶© Building frontend image..."
          if ! docker build -t ${REGISTRY}/${REGISTRY_NAME}/frontend:${VERSION} ./frontend; then
            echo "‚ùå Error: Failed to build frontend image"
            exit 1
          fi
          
          echo "ü¶© Pushing versioned frontend image..."
          if ! docker push ${REGISTRY}/${REGISTRY_NAME}/frontend:${VERSION}; then
            echo "‚ùå Error: Failed to push frontend versioned image"
            exit 1
          fi
          
          echo "ü¶© Tagging and pushing latest..."
          docker tag ${REGISTRY}/${REGISTRY_NAME}/frontend:${VERSION} ${REGISTRY}/${REGISTRY_NAME}/frontend:latest
          if ! docker push ${REGISTRY}/${REGISTRY_NAME}/frontend:latest; then
            echo "‚ùå Error: Failed to push frontend latest image"
            exit 1
          fi
          
          echo "‚úÖ Frontend image build and push completed"

      - name: Cleanup old images üßπ ü¶©
        run: |
          echo "ü¶© Cleaning up old images..."
          if ! ./.github/scripts/cleanup-registry.sh; then
            echo "‚ö†Ô∏è Warning: Image cleanup had some issues"
          fi
          echo "‚úÖ Image cleanup completed"

      - name: Setup Kubernetes Dependencies üéØ ü¶©
        run: |
          echo "ü¶© Installing Helm..."
          curl -fsSL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
          
          echo "ü¶© Adding Helm repositories..."
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          
          echo "ü¶© Setting up SSL certificate..."
          CERT_NAME="${{ env.DOMAIN_NAME }}-cert"
          
          # Check if certificate already exists and is valid  
          echo "ü¶© Checking for existing certificate..."
          EXISTING_CERT_ID=$(doctl compute certificate list --format ID,Name,State --no-header | grep "${CERT_NAME}" | grep "verified" | awk '{print $1}')
          
          if [ -z "$EXISTING_CERT_ID" ]; then
            echo "ü¶© No valid certificate found. Creating new one..."
            if ! doctl compute certificate create \
              --name ${CERT_NAME} \
              --type lets_encrypt \
              --dns-names ${{ env.DOMAIN_NAME }}.${{ env.DOMAIN_SUFFIX }}; then
              echo "‚ùå Error: Failed to create certificate"
              exit 1
            fi
            
            echo "ü¶© Waiting for certificate to be ready..."
            for i in {1..30}; do
              if doctl compute certificate list | grep -q "${CERT_NAME}.*verified"; then
                echo "‚úÖ Certificate is ready"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "‚ùå Error: Certificate creation timed out"
                exit 1
              fi
              echo "ü¶© Waiting for certificate... (attempt $i/30)"
              sleep 10
            done
          else
            echo "‚úÖ Using existing verified certificate with ID: $EXISTING_CERT_ID"
          fi
          
          echo "ü¶© Installing NGINX Ingress Controller..."
          
          # First, check if there's an existing installation
          echo "ü¶© Checking for existing NGINX installation..."
          if helm list -n ingress-nginx | grep -q "ingress-nginx"; then
            echo "ü¶© Found existing installation, cleaning up..."
            
            # Get the load balancer ID
            LB_NAME="${{ env.DOMAIN_NAME }}-lb"
            LB_ID=$(doctl compute load-balancer list --format ID,Name --no-header | grep "${LB_NAME}" | awk '{print $1}')
            
            # Remove finalizers to force cleanup
            kubectl get -n ingress-nginx $(kubectl get -n ingress-nginx all -o name) -o name | xargs -I {} kubectl patch -n ingress-nginx {} -p '{"metadata":{"finalizers":null}}' --type=merge || true
            
            # Delete the release and namespace
            helm uninstall ingress-nginx -n ingress-nginx || true
            kubectl delete namespace ingress-nginx --wait || true
            
            # Delete the load balancer if it exists
            if [ ! -z "$LB_ID" ]; then
              echo "ü¶© Deleting existing load balancer..."
              doctl compute load-balancer delete --force "${LB_ID}" || true
              # Wait for load balancer to be fully deleted
              echo "ü¶© Waiting for load balancer to be deleted..."
              while doctl compute load-balancer get "${LB_ID}" > /dev/null 2>&1; do
                echo "ü¶© Still waiting for load balancer deletion..."
                sleep 5
              done
            fi
            
            # Wait for namespace deletion to complete
            echo "ü¶© Waiting for namespace cleanup..."
            while kubectl get namespace ingress-nginx > /dev/null 2>&1; do
              echo "ü¶© Still waiting for namespace cleanup..."
              sleep 5
            done
            
            echo "‚úÖ Cleanup completed"
          fi
          
          echo "ü¶© Installing NGINX Ingress Controller..."
          NGINX_CMD="helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --set controller.publishService.enabled=true \
            --set controller.service.type=LoadBalancer \
            --set controller.service.annotations.\"service\\.beta\\.kubernetes\\.io/do-loadbalancer-name\"=\"${{ env.DOMAIN_NAME }}-lb\" \
            --set controller.service.annotations.\"service\\.beta\\.kubernetes\\.io/do-loadbalancer-hostname\"=\"${{ env.DOMAIN_NAME }}.${{ env.DOMAIN_SUFFIX }}\" \
            --set controller.service.annotations.\"service\\.beta\\.kubernetes\\.io/do-loadbalancer-protocol\"=http \
            --set controller.service.annotations.\"service\\.beta\\.kubernetes\\.io/do-loadbalancer-http-ports\"=80 \
            --set controller.service.annotations.\"service\\.beta\\.kubernetes\\.io/do-loadbalancer-tls-ports\"=443 \
            --set controller.service.annotations.\"service\\.beta\\.kubernetes\\.io/do-loadbalancer-certificate-id\"=\"${EXISTING_CERT_ID}\" \
            --set controller.service.annotations.\"service\\.beta\\.kubernetes\\.io/do-loadbalancer-redirect-http-to-https\"=true \
            --set controller.service.ports.http=80 \
            --set controller.service.ports.https=443 \
            --set controller.service.targetPorts.http=80 \
            --set controller.service.targetPorts.https=80 \
            --wait --timeout 5m"
          
          if ! eval "$NGINX_CMD"; then
            echo "‚ùå Error: Failed to install NGINX Ingress"
            kubectl get pods -n ingress-nginx
            kubectl describe pods -n ingress-nginx
            exit 1
          fi

          # Wait for ingress controller to be fully ready
          echo "ü¶© Waiting for Ingress Controller to be ready..."
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=5m

          # Attach load balancer to project
          echo "ü¶© Attaching load balancer to project..."
          LB_NAME="${{ env.DOMAIN_NAME }}-lb"
          LB_ID=$(doctl compute load-balancer list --format ID,Name --no-header | grep "${LB_NAME}" | awk '{print $1}')
          if [ ! -z "$LB_ID" ]; then
            LB_URN="do:loadbalancer:${LB_ID}"
            PROJECT_ID=$(doctl projects list --format ID,Name --no-header | grep -i "${{ env.PROJECT_NAME }}" | awk '{print $1}')
            if [ ! -z "$PROJECT_ID" ]; then
              echo "ü¶© Attaching load balancer (${LB_URN}) to project (${PROJECT_ID})..."
              if ! doctl projects resources assign "${PROJECT_ID}" --resource="${LB_URN}"; then
                echo "‚ö†Ô∏è Warning: Failed to attach load balancer to project"
              fi
            else
              echo "‚ö†Ô∏è Warning: Could not find project ID"
            fi
          else
            echo "‚ö†Ô∏è Warning: Could not find load balancer to attach to project"
          fi

          echo "ü¶© Creating namespace if not exists..."
          if ! kubectl create namespace ${REGISTRY_NAME} --dry-run=client -o yaml | kubectl apply -f -; then
            echo "‚ùå Error: Failed to create namespace"
            exit 1
          fi

      - name: Create Kubernetes Secrets ü¶©
        run: |
          echo "ü¶© Creating namespace if not exists..."
          if ! kubectl create namespace ${REGISTRY_NAME} --dry-run=client -o yaml | kubectl apply -f -; then
            echo "‚ùå Error: Failed to create namespace"
            exit 1
          fi
          
          echo "ü¶© Creating registry credentials..."
          if ! kubectl create secret docker-registry registry-credentials \
            --namespace=${REGISTRY_NAME} \
            --docker-server=${REGISTRY} \
            --docker-username=${{ env.DIGITALOCEAN_ACCESS_TOKEN }} \
            --docker-password=${{ env.DIGITALOCEAN_ACCESS_TOKEN }} \
            --dry-run=client -o yaml | kubectl apply -f -; then
            echo "‚ùå Error: Failed to create registry credentials"
            exit 1
          fi
          
          echo "ü¶© Creating application secrets..."
          # Create a temporary file for the tokens
          echo "${{ env.GH_API_TOKENS }}" > github_tokens.txt
          
          # Delete existing secret if it exists
          kubectl delete secret app-secrets --namespace=${REGISTRY_NAME} --ignore-not-found=true
          
          # Create the secret with the correct key
          if ! kubectl create secret generic app-secrets \
            --namespace=${REGISTRY_NAME} \
            --from-literal=github.tokens="${{ env.GH_API_TOKENS }}"; then
            echo "‚ùå Error: Failed to create application secrets"
            exit 1
          fi
          
          # Verify secret was created correctly
          echo "ü¶© Verifying secret creation..."
          if ! kubectl get secret app-secrets --namespace=${REGISTRY_NAME} -o jsonpath='{.data}' | grep 'github\.tokens'; then
            echo "‚ùå Error: Secret verification failed"
            exit 1
          fi
          
          echo "‚úÖ Kubernetes secrets created successfully"

      - name: Deploy Kubernetes Configurations üöÄ ü¶©
        env:
          REGISTRY_URL: ${REGISTRY}/${REGISTRY_NAME}
          DOMAIN_SUFFIX: ${{ env.DOMAIN_SUFFIX }}
        run: |
          echo "ü¶© Processing and applying Kubernetes configurations..."
          
          for file in kubernetes/base/*.yaml; do
            echo "ü¶© Processing $file..."
            # Use envsubst to replace environment variables
            envsubst < $file > processed.yaml
            if ! kubectl apply -n ${REGISTRY_NAME} -f processed.yaml; then
              echo "‚ùå Error: Failed to apply $file"
              exit 1
            fi
            rm processed.yaml
          done
          
          echo "ü¶© Waiting for deployments to be ready..."
          
          # Function to check pod status and logs
          check_deployment() {
            local deployment=$1
            echo "ü¶© Checking status for deployment: $deployment"
            
            # Get pod status
            echo "ü¶© Pod status:"
            kubectl -n ${REGISTRY_NAME} get pods -l app=$deployment -o wide
            
            # Get failed pods if any
            failed_pods=$(kubectl -n ${REGISTRY_NAME} get pods -l app=$deployment -o jsonpath='{.items[?(@.status.phase!="Running")].metadata.name}')
            
            if [ ! -z "$failed_pods" ]; then
              echo "ü¶© Found failed pods: $failed_pods"
              for pod in $failed_pods; do
                echo "ü¶© Logs for failed pod $pod:"
                kubectl -n ${REGISTRY_NAME} logs $pod --all-containers --tail=50
                
                echo "ü¶© Events for failed pod $pod:"
                kubectl -n ${REGISTRY_NAME} get events --field-selector involvedObject.name=$pod
                
                echo "ü¶© Describing failed pod $pod:"
                kubectl -n ${REGISTRY_NAME} describe pod $pod
              done
            fi
          }
          
          # Wait for backend deployment
          echo "ü¶© Waiting for backend deployment..."
          if ! kubectl -n ${REGISTRY_NAME} rollout status deployment/backend --timeout=5m; then
            echo "‚ùå Error: Backend deployment failed to roll out"
            check_deployment "backend"
            exit 1
          fi
          
          # Wait for frontend deployment
          echo "ü¶© Waiting for frontend deployment..."
          if ! kubectl -n ${REGISTRY_NAME} rollout status deployment/frontend --timeout=5m; then
            echo "‚ùå Error: Frontend deployment failed to roll out"
            check_deployment "frontend"
            exit 1
          fi
          
          echo "‚úÖ Kubernetes configurations deployed successfully"

      - name: Create DNS Record üåç ü¶©
        run: |
          echo "ü¶© Getting LoadBalancer information..."
          
          # Get the load balancer ID
          LB_NAME="${{ env.DOMAIN_NAME }}-lb"
          LB_ID=$(doctl compute load-balancer list --format ID,Name --no-header | grep "${LB_NAME}" | awk '{print $1}')
          
          if [ -z "$LB_ID" ]; then
            echo "‚ùå Error: Could not find load balancer with name ${LB_NAME}"
            echo "ü¶© Available load balancers:"
            doctl compute load-balancer list
            exit 1
          fi
          
          echo "‚úÖ Found load balancer ID: ${LB_ID}"
          
          # Get the load balancer IP
          LB_IP=$(doctl compute load-balancer get ${LB_ID} --format IP --no-header)
          
          if [ -z "$LB_IP" ]; then
            echo "‚ùå Error: Could not get load balancer IP"
            exit 1
          fi
          
          echo "‚úÖ Got load balancer IP: ${LB_IP}"
          
          echo "ü¶© Checking for existing DNS records..."
          
          # First, clean up any stale records for our subdomain
          echo "ü¶© Cleaning up any stale DNS records..."
          RECORDS_TO_CLEAN=$(doctl compute domain records list ${{ env.DOMAIN_SUFFIX }} --format ID,Type,Name --no-header)
          
          # Clean up any A or CNAME records for our subdomain
          echo "$RECORDS_TO_CLEAN" | while read -r record; do
            RECORD_ID=$(echo $record | awk '{print $1}')
            RECORD_TYPE=$(echo $record | awk '{print $2}')
            RECORD_NAME=$(echo $record | awk '{print $3}')
            
            # Only process records for our subdomain
            if [ "$RECORD_NAME" = "${{ env.DOMAIN_NAME }}" ] || [ "$RECORD_NAME" = "@" ]; then
              if [ "$RECORD_TYPE" = "A" ] || [ "$RECORD_TYPE" = "CNAME" ]; then
                echo "ü¶© Removing old record: Type=$RECORD_TYPE, Name=$RECORD_NAME, ID=$RECORD_ID"
                doctl compute domain records delete ${{ env.DOMAIN_SUFFIX }} $RECORD_ID --force || true
              fi
            fi
          done
          
          echo "ü¶© Creating new A record for subdomain..."
          if ! doctl compute domain records create ${{ env.DOMAIN_SUFFIX }} \
            --record-type A \
            --record-name "${{ env.DOMAIN_NAME }}" \
            --record-data "${LB_IP}" \
            --record-ttl 300; then
            echo "‚ùå Error: Failed to create DNS record"
            exit 1
          fi
          
          echo "‚úÖ DNS record created successfully"
          
          echo "ü¶© Verifying DNS configuration..."
          FINAL_RECORDS=$(doctl compute domain records list ${{ env.DOMAIN_SUFFIX }} --format Type,Name,Data --no-header | grep "${{ env.DOMAIN_NAME }}" || true)
          echo "Current DNS records for ${{ env.DOMAIN_NAME }}.${{ env.DOMAIN_SUFFIX }}:"
          echo "$FINAL_RECORDS"

      - name: Verify Deployment üîç ü¶©
        run: |
          echo "ü¶© Checking deployment status..."
          
          echo "ü¶© Pod Status:"
          kubectl -n ${REGISTRY_NAME} get pods -o wide
          
          echo "ü¶© Service Status:"
          kubectl -n ${REGISTRY_NAME} get services
          
          echo "ü¶© Ingress Status:"
          kubectl -n ${REGISTRY_NAME} get ingress
          
          echo "ü¶© Load Balancer Status:"
          kubectl -n ingress-nginx get service ingress-nginx-controller
          
          echo "ü¶© Events:"
          kubectl -n ${REGISTRY_NAME} get events --sort-by='.lastTimestamp'
          
          # Verify all pods are running
          failed_pods=$(kubectl -n ${REGISTRY_NAME} get pods -o jsonpath='{.items[?(@.status.phase!="Running")].metadata.name}')
          if [ ! -z "$failed_pods" ]; then
            echo "‚ùå Error: The following pods are not running:"
            echo "$failed_pods"
            
            for pod in $failed_pods; do
              echo "ü¶© Describing failed pod $pod:"
              kubectl -n ${REGISTRY_NAME} describe pod $pod
              
              echo "ü¶© Logs for failed pod $pod:"
              kubectl -n ${REGISTRY_NAME} logs $pod --all-containers --tail=50 || true
            done
            exit 1
          fi
          
          echo "‚úÖ Deployment verification completed"

      - name: Create GitHub Deployment üì¶ ü¶©
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ env.GH_PAT }}
          environment: production
          initial-status: success
          environment-url: https://${{ env.DOMAIN_NAME }}.${{ env.DOMAIN_SUFFIX }}

      - name: Set environment variables
        run: |
          echo "DOMAIN_NAME=major-league-github" >> $GITHUB_ENV
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "BACKEND_REPLICAS=2" >> $GITHUB_ENV
          echo "FRONTEND_REPLICAS=2" >> $GITHUB_ENV
          # Reduced resource requests and limits
          echo "BACKEND_REQUEST_MEMORY=512Mi" >> $GITHUB_ENV
          echo "BACKEND_REQUEST_CPU=200m" >> $GITHUB_ENV
          echo "BACKEND_LIMIT_MEMORY=1Gi" >> $GITHUB_ENV
          echo "BACKEND_LIMIT_CPU=500m" >> $GITHUB_ENV
          echo "FRONTEND_REQUEST_MEMORY=128Mi" >> $GITHUB_ENV
          echo "FRONTEND_REQUEST_CPU=100m" >> $GITHUB_ENV
          echo "FRONTEND_LIMIT_MEMORY=256Mi" >> $GITHUB_ENV
          echo "FRONTEND_LIMIT_CPU=200m" >> $GITHUB_ENV
          echo "JAVA_MAX_HEAP=768m" >> $GITHUB_ENV
          echo "JAVA_MIN_HEAP=512m" >> $GITHUB_ENV


